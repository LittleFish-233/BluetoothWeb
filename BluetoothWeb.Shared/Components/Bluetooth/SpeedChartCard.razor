@inject IBluetoothService _bluetoothService
@implements IDisposable
@inject IPopupService _popupService
@inject ILocalDataService _localDataService


<MCard Class="h-100">
    <MCardTitle>波形图</MCardTitle>
    <MCardText>
        <MECharts Option="model" Width="@("100%")" Height="300">
        </MECharts>
    </MCardText>
    <MCardActions>
        <MSpacer />
        @if (_localDataService.Data.DisplaySpeedChart)
        {
            <BluetoothWeb.Shared.Components.CustomMasa.MasaButton Text="暂停" Icon="mdi-pause" IsAsync OnClick="Close" TextStyle />

        }
        else
        {
            <BluetoothWeb.Shared.Components.CustomMasa.MasaButton Text="开始" Icon="mdi-play" IsAsync OnClick="Open" TextStyle />

        }
    </MCardActions>
</MCard>
@code {

    EChartsOptionModel model = new EChartsOptionModel
    {
        Title=new EChartsOptionTitle
        {
            Text="速度 m/s"
        },
        Legend=new EChartsOptionLegend
        {
            Data=new List<string>
            {
                "A电机速度",
                "B电机速度",
                "C电机速度",
                "D电机速度"
            }
        },
        Series = new List<EChartsOptionSery>
        {
            new EChartsOptionSery{ Name="A电机速度" },
            new EChartsOptionSery{ Name="B电机速度" },
            new EChartsOptionSery{ Name="C电机速度" },
            new EChartsOptionSery{ Name="D电机速度" }
        }
    };

    List<double>[] Speeds = new List<double>[]
    {
        new List<double>(),
        new List<double>(),
        new List<double>(),
        new List<double>()
    };

    const int MaxDataLength = 100;
    const int MotorCount = 4;
    const int MaxAverageLength = 10;
    double[][] TempData = new double[MotorCount][];
    int index = 0;
    int DataIndex = 0;

    bool IsBusy;

    private System.Threading.Timer mytimer;

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < MotorCount; i++)
        {
            TempData[i] = new double[MaxDataLength];
        }
        _bluetoothService.OnDataReceive += DataReceive;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            //启动定时器
            mytimer = new System.Threading.Timer(new System.Threading.TimerCallback(Send), null, 0, 500);

        }
    }

    public async void Send(object o)
    {
        await InvokeAsync(StateHasChanged);

    }

    public void DataReceive(byte[] bytes)
    {
        if (_localDataService.Data.DisplaySpeedChart == false)
        {
            return;
        }


        short[] data = new short[4];
        ByteToInt16(bytes, 8, ref data);

        for (int i = 0; i < MotorCount; i++)
        {
            TempData[i][index] = data[i];
        }

        index++;
        if (index >= MaxAverageLength)
        {
            index = 0;
            DataIndex++;

            for (int i = 0; i < MotorCount; i++)
            {
                model.Series[i].Data.Add(Math.Round(TempData[i].Average()/ 1000.0, 3));
            }

            model.XAxis.Data.Add(DataIndex.ToString().ToString());

            if (model.Series[0].Data.Count > MaxDataLength)
            {
                model.XAxis.Data.RemoveAt(0);
                for (int i = 0; i < MotorCount; i++)
                {
                    model.Series[i].Data.RemoveAt(0);
                }
            }

        }
    }

    public async Task Open()
    {
        _localDataService.Data.DisplaySpeedChart = true;
        await _localDataService.Save();
    }

    public async Task Close()
    {
        _localDataService.Data.DisplaySpeedChart = false;
        await _localDataService.Save();
    }

    private void ByteToInt16(Byte[] arrByte, int nByteCount, ref Int16[] destInt16Arr)
    {
        int i = 0;
        try
        {
            //按两个字节一个整数解析，前一字节当做整数低位，后一字节当做整数高位，调用系统函数转化
            for (i = 0; i < nByteCount / 2; i++)
            {
                Byte[] tmpBytes = new Byte[2] { arrByte[2 * i + 0], arrByte[2 * i + 1] };
                destInt16Arr[i] = BitConverter.ToInt16(tmpBytes, 0);
            }
        }
        catch (Exception e)
        {
            _popupService.ToastErrorAsync("Byte to Int16转化错误！i=" + e.Message + i.ToString());
        }
    }

    public void Dispose()
    {
        _bluetoothService.OnDataReceive -= DataReceive;
    }
}
