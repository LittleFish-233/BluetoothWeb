@inject IBluetoothService _bluetoothService
@implements IDisposable
@inject ILocalDataService _localDataService

<MCard Class="h-100">
    <MCardTitle>数据接收</MCardTitle>
    <MCardText Style="white-space: break-spaces;height:200px;" Class="overflow-auto">
        @Text
    </MCardText>
    <MCardActions>
        <MSpacer />
        @if (_localDataService.Data.DisplayReceiveText)
        {
            <BluetoothWeb.Shared.Components.CustomMasa.MasaButton Text="暂停" Icon="mdi-pause" IsAsync OnClick="Close" TextStyle />

        }
        else
        {
            <BluetoothWeb.Shared.Components.CustomMasa.MasaButton Text="开始" Icon="mdi-play" IsAsync OnClick="Open" TextStyle />

        }
    </MCardActions>
</MCard>

@code {
    public string Text { get; set; } = "";
    public List<byte> Bytes { get; set; } = new List<byte>();


    protected override async Task OnInitializedAsync()
    {
        _bluetoothService.OnDataReceive += DataReceive;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }
    public void AddLog(string log)
    {
        if (_localDataService.Data.DisplayReceiveText == false)
        {
            return;
        }
        Text = ($"[{DateTime.Now.ToString("G")}]{log.Replace("\0", "")}\n") + Text;
        InvokeAsync(StateHasChanged);
    }

    void DataReceive(byte[] bytes)
    {
        if (bytes.Length > 100)
        {
            return;
        }
        AddLog(System.Text.Encoding.UTF8.GetString(bytes));
    }

    public async Task Open()
    {
        _localDataService.Data.DisplayReceiveText = true;
        await _localDataService.Save();
    }

    public async Task Close()
    {
        _localDataService.Data.DisplayReceiveText = false;
        await _localDataService.Save();
    }


    public void Dispose()
    {
        _bluetoothService.OnDataReceive -= DataReceive;
    }
}
